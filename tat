[33mcommit 8a75702993ced993d49e864995099f18cd339422[m[33m ([m[1;36mHEAD -> [m[1;32mwxt[m[33m)[m
Author: XT-Wong <1484782428@qq.com>
Date:   Sat Jun 1 16:45:44 2024 +0800

    aug1:CLOP aug2:Cyc_aug

[1mdiff --git a/cfgs/config.yaml b/cfgs/config.yaml[m
[1mindex e8ce5a7..a0e29d1 100644[m
[1m--- a/cfgs/config.yaml[m
[1m+++ b/cfgs/config.yaml[m
[36m@@ -20,7 +20,7 @@[m [mreplay_buffer_num_workers: 4[m
 nstep: 3[m
 batch_size: 256[m
 # misc[m
[31m-seed: 3407[m
[32m+[m[32mseed: 1[m
 device: cuda[m
 save_video: true[m
 save_train_video: false[m
[36m@@ -47,6 +47,8 @@[m [magent:[m
   stddev_clip: 0.3[m
   use_r3m: false[m
   use_vip: false[m
[32m+[m[32m  CLOP: 0[m
[32m+[m[32m  use_CycAug: false[m
 [m
 hydra:[m
   run:[m
[1mdiff --git a/drqv2.py b/drqv2.py[m
[1mindex 63628de..ff459d8 100644[m
[1m--- a/drqv2.py[m
[1m+++ b/drqv2.py[m
[36m@@ -7,9 +7,52 @@[m [mimport numpy as np[m
 import torch[m
 import torch.nn as nn[m
 import torch.nn.functional as F[m
[31m-[m
[32m+[m[32mimport torchvision.transforms as T[m
[32m+[m[32mimport hashlib[m
 import utils[m
 [m
[32m+[m[32mclass CLOPLayer(nn.Module):[m
[32m+[m[32m    def __init__(self, p=0.9):[m
[32m+[m[32m        super().__init__()[m
[32m+[m[32m        self.p = p[m
[32m+[m
[32m+[m[32m    def _shuffle(self, x):[m
[32m+[m[32m        batch_size = x.shape[0][m
[32m+[m[32m        nb_channels = x.shape[1][m
[32m+[m[32m        flat = x.flatten(start_dim=2, end_dim=-1)[m
[32m+[m[32m        idx = self._index_permute(x[0, 0]).to(x.device)[m
[32m+[m[32m        idx = idx.repeat(batch_size, nb_channels, 1)[m
[32m+[m[32m        res = torch.gather(flat, 2, idx)[m
[32m+[m[32m        return res.view_as(x)[m
[32m+[m
[32m+[m[32m    def _index_permute(self, x):[m
[32m+[m[32m        n_element = x.nelement()[m
[32m+[m[32m        dim = int(np.sqrt(n_element))[m
[32m+[m[32m        permuted_indexes = torch.arange(0, n_element, dtype=int)[m
[32m+[m[32m        p = (1 - self.p / 2, self.p / 8, self.p / 8, self.p / 8, self.p / 8)[m
[32m+[m[32m        for i in range(-n_element + 1, n_element):[m
[32m+[m[32m            i = abs(i)[m
[32m+[m[32m            r = np.random.choice([0, 1, 2, 3, 4], p=p)[m
[32m+[m[32m            if r != 0:[m
[32m+[m[32m                if r == 1:[m
[32m+[m[32m                    idx = i + 1[m
[32m+[m[32m                if r == 2:[m
[32m+[m[32m                    idx = i - 1[m
[32m+[m[32m                if r == 3:[m
[32m+[m[32m                    idx = i + dim[m
[32m+[m[32m                if r == 4:[m
[32m+[m[32m                    idx = i - dim[m
[32m+[m[32m                if (idx > 0) & (idx < n_element):[m
[32m+[m[32m                    tmp = int(permuted_indexes[i])[m
[32m+[m[32m                    permuted_indexes[i] = int(permuted_indexes[idx])[m
[32m+[m[32m                    permuted_indexes[idx] = tmp[m
[32m+[m[32m        return permuted_indexes[m
[32m+[m
[32m+[m[32m    def forward(self, x):[m
[32m+[m[32m        # print("shuffled")[m
[32m+[m[32m        shuffled = self._shuffle(x)[m
[32m+[m[32m        return shuffled[m
[32m+[m[41m    [m
 [m
 class RandomShiftsAug(nn.Module):[m
     def __init__(self, pad):[m
[36m@@ -44,29 +87,14 @@[m [mclass RandomShiftsAug(nn.Module):[m
                              padding_mode='zeros',[m
                              align_corners=False)[m
 [m
[31m-class RandomCropAug(nn.Module):[m
[31m-    def __init__(self, crop_size):[m
[31m-        super().__init__()[m
[31m-        self.crop_size = crop_size[m
[31m-[m
[31m-    def forward(self, x):[m
[31m-        n, c, h, w = x.size()[m
 [m
[31m-        assert h == w[m
[31m-        start_x = torch.randint(0, w - self.crop_size + 1, (n,), device=x.device)[m
[31m-        start_y = torch.randint(0, h - self.crop_size + 1, (n,), device=x.device)[m
[31m-        indices_x = start_x.view(-1, 1, 1).expand(-1, self.crop_size, self.crop_size)[m
[31m-    